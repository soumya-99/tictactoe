{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","utils/helper.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","style","className","Board","squares","map","square","index","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","winner","lines","i","length","a","b","c","calculateWinner","xO","historyPoint","slice","current","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAYeA,MAVf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAClBC,EAAQF,EAAK,kBAAcA,GAAd,UAEnB,OACC,wBAAQG,UAAWD,EAAOD,QAASA,EAAnC,SACED,KCMWI,MAVf,YAAsC,IAArBC,EAAoB,EAApBA,QAASJ,EAAW,EAAXA,QACzB,OACC,qBAAKE,UAAU,QAAf,SACEE,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACZ,cAAC,EAAD,CAAoBR,MAAOO,EAAQN,QAAS,kBAAMA,EAAQO,KAA7CA,SCuDFC,MA1Df,WACC,MAA8BC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QAAtD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACMC,ECRwB,SAACd,GAY/B,IAXA,IAAMe,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACD,CAAC,EAAG,EAAG,IAGLC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACtC,kBAAkBD,EAAMC,GAAxB,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GACrE,OAAOpB,EAAQkB,GAGjB,OAAO,KDVQG,CAAgBb,EAAQE,IACjCY,EAAKV,EAAU,IAAM,IAuC3B,OACC,qCACC,6CACA,cAAC,EAAD,CAAOZ,QAASQ,EAAQE,GAAad,QAxCnB,SAACO,GACpB,IAAMoB,EAAef,EAAQgB,MAAM,EAAGd,EAAa,GAC7Ce,EAAUF,EAAab,GACvBV,EAAO,YAAOyB,GAEhBX,GAAUd,EAAQG,KAItBH,EAAQG,GAASmB,EACjBb,EAAW,GAAD,mBAAKc,GAAL,CAAmBvB,KAC7BW,EAAcY,EAAaN,QAC3BJ,GAAYD,OA6BX,sBAAKd,UAAU,eAAf,UACC,8BACC,wBAAQF,QAZQ,WACpBa,EAAW,CAACH,MAAM,GAAGC,KAAK,QACvBI,EAAc,GACjBE,GAAW,IASP,qBAED,6BAAKC,EAAM,oBAAgBA,GAAhB,uBAA2CQ,YE/C3CI,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0fce35dc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Square({ value, onClick }) {\r\n\tconst style = value ? `squares ${value}` : `squares`\r\n\r\n\treturn (\r\n\t\t<button className={style} onClick={onClick}>\r\n\t\t\t{value}\r\n\t\t</button>\r\n\t)\r\n}\r\n\r\nexport default Square\r\n","import React from \"react\"\r\nimport Square from \"./Square\"\r\n\r\nfunction Board({ squares, onClick }) {\r\n\treturn (\r\n\t\t<div className=\"board\">\r\n\t\t\t{squares.map((square, index) => (\r\n\t\t\t\t<Square key={index} value={square} onClick={() => onClick(index)} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Board\r\n","import React, { useState } from \"react\"\r\nimport { calculateWinner } from \"../utils/helper\"\r\nimport Board from \"./Board\"\r\n\r\nfunction Game() {\r\n\tconst [history, setHistory] = useState([Array(9).fill(null)])\r\n\tconst [stepNumber, setStepNumber] = useState(0)\r\n\tconst [xIsNext, setXIsNext] = useState(true)\r\n\tconst winner = calculateWinner(history[stepNumber])\r\n\tconst xO = xIsNext ? \"X\" : \"O\"\r\n\r\n\tconst handleClick = (index) => {\r\n\t\tconst historyPoint = history.slice(0, stepNumber + 1) // whatever on point the histiry we're at, we only wanna know \"beginning(0)\" to \"that point(stepNumber+1), nothing after it...\"\r\n\t\tconst current = historyPoint[stepNumber] // this is the current point of our history\r\n\t\tconst squares = [...current]\r\n\t\t// return if won or occupied\r\n\t\tif (winner || squares[index]) return // if there has been a winner, or if square[i] is occupied.\r\n\t\t// If you're clicking on a square marked previously, it's return nothing.\r\n\r\n\t\t// select square\r\n\t\tsquares[index] = xO\r\n\t\tsetHistory([...historyPoint, squares])\r\n\t\tsetStepNumber(historyPoint.length)\r\n\t\tsetXIsNext(!xIsNext)\r\n\t}\r\n\r\n\t// const jumpTo = (step) => {\r\n\t// \tsetStepNumber(step)\r\n\t// \tsetXIsNext(step % 2 === 0)\r\n\t// }\r\n\r\n\t// const renderMoves = () => {\r\n\t// \thistory.map((_step, move) => {\r\n\t// \t\tconst destination = move ? `Go to move #${move}` : `Go to Start`\r\n\t// \t\treturn (\r\n\t// \t\t\t<li key={move}>\r\n\t// \t\t\t\t<button onClick={() => jumpTo(move)}>{destination}</button>\r\n\t// \t\t\t</li>\r\n\t// \t\t)\r\n\t// \t})\r\n\t// }\r\n\r\n\tconst handleReset = () => {\r\n\tsetHistory([Array(9).fill(null)])\r\n    setStepNumber(0)\r\n\tsetXIsNext(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1>Tic Tac Toe</h1>\r\n\t\t\t<Board squares={history[stepNumber]} onClick={handleClick} />\r\n\t\t\t<div className=\"info-wrapper\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button onClick={handleReset}>Reset</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h3>{winner ? `Winner!!! ${winner}` : `Next Player: ${xO}`}</h3>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Game\r\n","export const calculateWinner = (squares) => {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n        [0, 3, 6],\r\n\t]\r\n\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i]\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn squares[a]\r\n\t\t}\r\n\t}\r\n\treturn null\r\n}\r\n","import './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}